{"version":3,"file":"static/js/src_bootstrap_jsx.98c8bd22.chunk.js","mappings":"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","sources":["AcmeComponent.jsx","App.jsx","bootstrap.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { LinearProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import I18n from '@iobroker/adapter-react-v5/Components/I18n';\r\n// valid\r\nimport { I18n } from '@iobroker/adapter-react-v5';\r\nimport { ConfigGeneric } from '@iobroker/json-config';\r\n\r\nconst styles = {\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n    header: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    ok: {\r\n        color: '#0ba20b',\r\n    },\r\n    warn: {\r\n        color: '#f57d1d',\r\n    },\r\n    error: {\r\n        color: '#c42c3a',\r\n    },\r\n};\r\n\r\nclass AcmeComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.socket = this.props.oContext ? this.props.oContext.socket : this.props.socket;\r\n        Object.assign(this.state, {\r\n            collections: null,\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        super.componentDidMount();\r\n        await this.readData();\r\n        await this.socket.subscribeObject('system.certificates', this.onCertsChanged);\r\n    }\r\n\r\n    async readData(obj) {\r\n        let collections = obj || (await this.socket.getObject('system.certificates'));\r\n        if (collections?.native?.collections) {\r\n            collections = collections.native.collections;\r\n        } else {\r\n            collections = {};\r\n        }\r\n\r\n        this.setState({ collections });\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.socket.unsubscribeObject('system.certificates', this.onCertsChanged);\r\n    }\r\n\r\n    onCertsChanged = (id, obj) => {\r\n        if (id === 'system.certificates' && obj) {\r\n            this.readData(obj).catch(() => {});\r\n        }\r\n    };\r\n\r\n    renderItem() {\r\n        if (!this.state.collections) {\r\n            return <LinearProgress />;\r\n        }\r\n\r\n        return (\r\n            <div style={{ width: '100%' }}>\r\n                <h4>{I18n.t('custom_acme_title')}</h4>\r\n                <TableContainer\r\n                    component={Paper}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        size=\"small\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>{I18n.t('custom_acme_id')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_acme_status')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_acme_domains')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_acme_staging')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_acme_expires')}</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {Object.keys(this.state.collections).map(id => {\r\n                                const collection = this.state.collections[id];\r\n                                let status;\r\n                                if (new Date(collection.tsExpires).getTime() > Date.now() && !collection.staging) {\r\n                                    status = <span style={styles.ok}>OK</span>;\r\n                                } else if (new Date(collection.tsExpires).getTime() <= Date.now()) {\r\n                                    status = <span style={styles.error}>{I18n.t('custom_acme_expired')}</span>;\r\n                                } else if (collection.staging) {\r\n                                    status = <span style={styles.warn}>{I18n.t('custom_acme_staging')}</span>;\r\n                                }\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        key={id}\r\n                                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                    >\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            scope=\"row\"\r\n                                        >\r\n                                            {id}\r\n                                        </TableCell>\r\n                                        <TableCell>{status}</TableCell>\r\n                                        <TableCell>{collection.domains.join(', ')}</TableCell>\r\n                                        <TableCell style={collection.staging ? styles.warn : undefined}>\r\n                                            {collection.staging ? 'âœ“' : ''}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            style={\r\n                                                new Date(collection.tsExpires).getTime() < Date.now()\r\n                                                    ? styles.error\r\n                                                    : undefined\r\n                                            }\r\n                                        >\r\n                                            {new Date(collection.tsExpires).toLocaleString()}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAcmeComponent.propTypes = {\r\n    socket: PropTypes.object, // this is in oContext\r\n    oContext: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string, // this is in oContext\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default AcmeComponent;\r\n","// this file used only for simulation and not used in end build\r\n\r\nimport React from 'react';\r\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\n\r\nimport { Box } from '@mui/material';\r\nimport { I18n, Loader, GenericApp } from '@iobroker/adapter-react-v5';\r\n\r\nimport enLang from './i18n/en.json';\r\nimport deLang from './i18n/de.json';\r\nimport ruLang from './i18n/ru.json';\r\nimport ptLang from './i18n/pt.json';\r\nimport nlLang from './i18n/nl.json';\r\nimport frLang from './i18n/fr.json';\r\nimport itLang from './i18n/it.json';\r\nimport esLang from './i18n/es.json';\r\nimport plLang from './i18n/pl.json';\r\nimport ukLang from './i18n/uk.json';\r\nimport zhCnLang from './i18n/zh-cn.json';\r\n\r\nimport AcmeComponent from './AcmeComponent';\r\n\r\nconst styles = {\r\n    app: theme => ({\r\n        backgroundColor: theme.palette.background.default,\r\n        color: theme.palette.text.primary,\r\n        height: '100%',\r\n    }),\r\n    item: {\r\n        padding: 50,\r\n        width: '100%',\r\n    },\r\n};\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = { ...props };\r\n        super(props, extendedProps);\r\n\r\n        this.state = {\r\n            data: { myCustomAttribute: 'red' },\r\n            theme: this.createTheme(),\r\n        };\r\n        const translations = {\r\n            en: enLang,\r\n            de: deLang,\r\n            ru: ruLang,\r\n            pt: ptLang,\r\n            nl: nlLang,\r\n            fr: frLang,\r\n            it: itLang,\r\n            es: esLang,\r\n            pl: plLang,\r\n            uk: ukLang,\r\n            'zh-cn': zhCnLang,\r\n        };\r\n\r\n        I18n.setTranslations(translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return (\r\n                <StyledEngineProvider injectFirst>\r\n                    <ThemeProvider theme={this.state.theme}>\r\n                        <Loader themeType={this.state.themeType} />\r\n                    </ThemeProvider>\r\n                </StyledEngineProvider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <StyledEngineProvider injectFirst>\r\n                <ThemeProvider theme={this.state.theme}>\r\n                    <Box sx={styles.app}>\r\n                        <div style={styles.item}>\r\n                            <AcmeComponent\r\n                                socket={this.socket}\r\n                                themeType={this.state.themeType}\r\n                                themeName={this.state.themeName}\r\n                                attr=\"myCustomAttribute\"\r\n                                data={this.state.data}\r\n                                onError={() => {}}\r\n                                instance={0}\r\n                                schema={{\r\n                                    name: 'ConfigCustomAcmeSet/Components/AcmeComponent',\r\n                                    type: 'custom',\r\n                                }}\r\n                                onChange={data => this.setState({ data })}\r\n                            />\r\n                        </div>\r\n                    </Box>\r\n                </ThemeProvider>\r\n            </StyledEngineProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// this file used only for simulation and not used in end build\r\n\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './App';\r\n\r\nwindow.adapterName = 'adapter-component-template';\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container);\r\nroot.render(\r\n    <React.StrictMode>\r\n        <App socket={{ port: 8081 }} />\r\n    </React.StrictMode>,\r\n);\r\n"],"names":["styles","AcmeComponent","props","id","obj","collections","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","collection","status","LinearProgress","theme","App","extendedProps","translations","StyledEngineProvider","ThemeProvider","Box","data","container"],"sourceRoot":""}